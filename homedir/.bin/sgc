#!/usr/bin/env zsh
#### SSH Gate Control (SGC)
## Utility for providing distinct environments
## for ssh. Each environment has agents, config, ...
##
## TODO: gpg-agent
## TODO: sgc_config.example
## TODO: document 'git config core.sshCommand 'env SGC_CONFIG=acheron zsh ~/.bin/sgc ssh'

emulate zsh
set -u

### internal functions
_sgc_log_error()   { (>&2 echo "[EE] ${@}") }  # log error msg
_sgc_log_warning() { (>&1 echo "[WW] ${@}") }  # log warning msg
_sgc_log_info()    { [[ "${SGC_LOG_VERBOSE:-0}" -gt 0 ]] && (>&1 echo "[II] ${@}") }  # log info msg
_sgc_config_load() {  # load configuration
  ## source sgc_config if exists
  if [[ -n "${1}" ]]; then
    [[ -r "${HOME}/.sgc.d/${1}/sgc_config" ]] && source "${HOME}/.sgc.d/${1}/sgc_config"
    SGC_CONFIG_DIR="${HOME}/.sgc.d/${1}"
  else
    SGC_CONFIG_DIR="${HOME}"
  fi

  ## set configuration (defaults)
  SGC_NAME="${SGC_NAME:-default}"
  SGC_AGENT="${(L)SGC_AGENT:-passthrough}"
  SGC_AGENT_IMPORT="${(L)SGC_AGENT_IMPORT:-no}"
  SGC_AGENT_PKCS11="${SGC_AGENT_PKCS11:-}"
  SGC_JUMP_PROXY="${SGC_JUMP_PROXY:-}"
}
_sgc_config_clear() {  # clear configuration
  ## clear configuration
  unset \
    SGC_NAME \
    SGC_AGENT \
    SGC_AGENT_IMPORT \
    SGC_AGENT_PKCS11 \
    SGC_JUMP_PROXY \
    SGC_CONFIG_DIR
}
_sgc_config_verify() {  # verify configuration
  local retval=0

  ## verify agent
  local agent_range=(none ssh gpg passthrough)
  if (( ! ${agent_range[(I)${SGC_AGENT}]} )) ; then
    retval=1
    _sgc_log_error "The SGC_AGENT value of is not in (${agent_range[@]})!"
  fi

  ## verify PKCS11 library
  if [[ -n "${SGC_AGENT_PKCS11}" ]] && [[ ! -r "${SGC_AGENT_PKCS11}" ]]; then
    retval=1
    _sgc_log_error "Cannot read PKCS11 library (${SGC_AGENT_PKCS11})!"
  fi

  ## warn about IMPORT and GPG
  [[ "${SGC_AGENT}" == "gpg" ]] && [[ "${SGC_AGENT_IMPORT}" == "yes" ]] && \
    _sgc_log_warning "Auto imprting of keys only works for when SGC_AGENT is set to 'ssh'."

  ## ensure .gnupg directory exists
  if [[ ! -e "${SGC_CONFIG_DIR}/.gnupg/" ]]; then
    mkdir -p -m 0700 "${SGC_CONFIG_DIR}/.gnupg/"
  fi

  return ${retval}
}
_sgc_check_verbose() {  # check -v has been passed
  (( ${@[(I)-v]} )) && SGC_LOG_VERBOSE=1
}
_sgc_setup_env() {  # setup environment
  case "${SGC_AGENT}" in
    nono|ssh|gpg)  unset SSH_AUTH_SOCK SSH_AGENT_PID GPG_AGENT_INFO GPG_TTY ;|
    none)          echo -n "-u SSH_AUTH_SOCK -u SSH_AGENT_PID -u GPG_AGENT_INFO " ;|
    ssh)
      local pids=($(ps -a -U ${USER} -o pid))
      [[ -r "${SGC_CONFIG_DIR}/.ssh-agent.env" ]] && source "${SGC_CONFIG_DIR}/.ssh-agent.env" 2> /dev/null > /dev/null
      if (( ! ${pids[(I)${SSH_AGENT_PID:-}]} )); then
        eval $(ssh-agent >&1 > "${SGC_CONFIG_DIR}/.ssh-agent.env") 2> /dev/null > /dev/null
        if [[ "${SGC_AGENT_IMPORT}" =~ "^yes$" ]]; then
          for key in identity id_dsa id_ecdsa id_ed25519 id_rsa; do
            if [[ -r "${SGC_CONFIG_DIR}/${key}" ]]; then
              eval env SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-}" SSH_AGENT_PID="${SSH_AGENT_PID:-}" ssh-add "${SGC_CONFIG_DIR}/${key}"
            fi
          done
        fi
        if [[ -n "${SGC_AGENT_PKCS11:-}" ]]; then
          eval env SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-}" SSH_AGENT_PID="${SSH_AGENT_PID:-}" ssh-add -s "${SGC_AGENT_PKCS11}"
        fi
      fi
    ;|
    gpg)
      local pids=($(ps -a -U ${USER} -o pid))
      [[ -r "${SGC_CONFIG_DIR}/.gpg-agent.env" ]] && source "${SGC_CONFIG_DIR}/.gpg-agent.env" 2> /dev/null > /dev/null
      if (( ! ${pids[(I)${SSH_AGENT_PID:-}]} )); then
        eval $(gpg-agent --homedir "${SGC_CONFIG_DIR}/.gnupg/" --write-env-file "${SGC_CONFIG_DIR}/.gpg-agent.env" --no-use-standard-socket --enable-ssh-support --daemon) 2> /dev/null > /dev/null
      fi
    ;|
    passthrough|ssh|gpg)
      if [[ -n "${SSH_AUTH_SOCK:-}" ]]; then
        echo -n "SSH_AUTH_SOCK=\"${SSH_AUTH_SOCK:-}\" "
      fi
      if [[ -n "${SSH_AGENT_PID:-}" ]]; then
        echo -n "SSH_AGENT_PID=\"${SSH_AGENT_PID:-}\" "
      fi
      if [[ -n "${GPG_AGENT_INFO:-}" ]]; then
        echo -n "GPG_AGENT_INFO=\"${GPG_AGENT_INFO:-}\" "
        ## NOTE: when GPG_TTY is set the pin entry program does not show!
        # echo -n "GPG_TTY=\"$(tty)\" "
      fi
    ;;
  esac
}
_sgc_setup_ssh() {  # setup ssh args
  local skip_proxy=${(L)1:-no}
  [[ "${SGC_CONFIG_DIR}/" == "${HOME}/" ]] && return 0

  echo -n " -o UserKnownHostsFile=\"${SGC_CONFIG_DIR}/known_hosts\""
  if [[ "${skip_proxy}" == "no" ]] && [[ -n "${SGC_JUMP_PROXY}" ]]; then
    local proxy_args=()
    proxy_args+=(-o ClearAllForwardings=yes)
    if [[ "${SGC_JUMP_PROXY}" =~ "^([a-zA-Z0-9]+)\@([a-zA-Z0-9._-]+)\:([0-9]+)$" ]]; then
      proxy_args+=(-l)
      proxy_args+=(${match[1]})
      proxy_args+=(-p)
      proxy_args+=(${match[3]})
      proxy_args+=(-W)
      proxy_args+=("'[%h]:%p'")
      proxy_args+=(${match[2]})
    elif [[ "${SGC_JUMP_PROXY}" =~ "^([a-zA-Z0-9._-]+)\:([0-9]+)$" ]]; then
      proxy_args+=(-p)
      proxy_args+=(${match[2]})
      proxy_args+=(-W)
      proxy_args+=("'[%h]:%p'")
      proxy_args+=(${match[1]})
    elif [[ "${SGC_JUMP_PROXY}" =~ "^([a-zA-Z0-9]+)\@([a-zA-Z0-9._-]+)$" ]]; then
      proxy_args+=(-l)
      proxy_args+=(${match[1]})
      proxy_args+=(-W)
      proxy_args+=("'[%h]:%p'")
      proxy_args+=(${match[2]})
    else
      proxy_args+=(-W)
      proxy_args+=("'[%h]:%p'")
      proxy_args+=(${SGC_JUMP_PROXY})
    fi
    echo -n " -o ProxyCommand=\"ssh$(_sgc_setup_ssh yes) ${proxy_args[@]} 2> /dev/null\""
  fi
  if [[ -r "${SGC_CONFIG_DIR}/ssh_config" ]]; then
    echo -n " -F \"${SGC_CONFIG_DIR}/ssh_config\""
  fi
}
_sgc_setup_gpg() {  # setup gpg args
  echo -n " --homedir \"${SGC_CONFIG_DIR}/.gnupg/\""
}
_sgc_command_kill_agent() {  # kill agents
  local pids=($(ps -a -U ${USER} -o pid))
  for agent_env in .ssh-agent.env .gpg-agent.env; do
    [[ -r "${SGC_CONFIG_DIR}/${agent_env}" ]] && source "${SGC_CONFIG_DIR}/${agent_env}" 2> /dev/null > /dev/null
    if (( ${pids[(I)${SSH_AGENT_PID:-}]} )); then
      [[ -n "${SSH_AGENT_PID:-}" ]] && kill ${SSH_AGENT_PID}
    fi
  done
}
_sgc_command() {  # wraps commands in proper flags and environment
  local mode=$1; shift
  local cmd=$1; shift
  local cmd_args=(${@})
  local cmd_eval=()

  ## NOTE: inject only what is needed as efficiently as possible
  case ${mode} in
    env|ssh|gpg|rsync) cmd_eval+=(env $(_sgc_setup_env) ${cmd}) ;|
    ssh)               cmd_eval+=($(_sgc_setup_ssh))            ;|
    gpg)               cmd_eval+=($(_sgc_setup_gpg))            ;|
    rsync)             cmd_eval+=(-e 'ssh $(_sgc_setup_ssh)')   ;|
    env|ssh|gpg|rsync) cmd_eval+=(${cmd_args[@]})               ;;
  esac

  if [[ "${#cmd_eval}" -gt 0 ]]; then
    _sgc_log_info "Executing: ${cmd_eval[@]}"
    eval "${cmd_eval[@]}"
  fi
}
_sgc_exit_error() { _sgc_config_clear ; _sgc_log_error ${@} ; exit 1 }  # exit with error
_sgc_exit_ok()    { _sgc_config_clear ; exit 0 }                        # exit normally

### main
_sgc_config_load "${SGC_CONFIG:-}"
_sgc_check_verbose ${@}
_sgc_config_verify || _sgc_exit_error "Configuration is not or invalid complete!"
_sgc_log_info "SSH Gate Command (profile=${SGC_NAME})"
case ${(L)1:-} in
  scp)               _sgc_command ssh ${@}        ;;
  ssh)               _sgc_command ssh ${@}        ;;
  ssh-add)           _sgc_command env ${@}        ;;
  kill-agent)        _sgc_command_kill_agent ${@} ;;
  gpg|gpg2)          _sgc_command gpg ${@}        ;;
  gpg-connect-agent) _sgc_command gpg ${@}        ;;
  rsync)             _sgc_command rsync ${@}      ;;
  *)
    if [[ ${#@} -gt 0 ]]; then
      _sgc_log_error "No handler known for the command \"${1:-}\"!"
    else
      SGC_LOG_VERBOSE=1 _sgc_log_info "Usage: sgc [command] [command_arguments]"
      SGC_LOG_VERBOSE=1 _sgc_log_info "       sgc ssh -l myuser server.example.org"
      SGC_LOG_VERBOSE=1 _sgc_log_info "       sgc scp data.tar.gz server.example.org:/data/archive_YYYYMMDD.tar.gz"
    fi
  ;;
esac
_sgc_exit_ok

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2
